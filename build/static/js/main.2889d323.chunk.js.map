{"version":3,"sources":["Notification.jsx","App.js","reportWebVitals.js","index.js"],"names":["Notification","message","className","App","useState","personArray","setPersonArray","newName","setNewName","newNumber","setNewNumber","filterInfo","setFilterInfo","filterArray","setFilterArray","isMessage","setMessage","urlServer","useEffect","console","log","axios","get","then","response","data","onChange","event","inputFilter","target","value","filterResult","filter","person","name","toLowerCase","match","onSubmit","preventDefault","newArrayOfName","map","element","newArrayOfNumber","number","includes","window","alert","confirm","tempInfo","find","personlUrl","id","personObejct","put","setTimeout","info","catch","error","post","concat","inputName","inputNumber","type","personInfo","onClick","resultDelete","delete","toggleDeleteOf","reportWebVitals","onPerfEntry","Function","getCLS","getFID","getFCP","getLCP","getTTFB","ReactDOM","render","StrictMode","document","getElementById"],"mappings":"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","file":"static/js/main.2889d323.chunk.js","sourcesContent":["\r\nconst Notification = ({message}) => {\r\n    if(message === null){\r\n        return null;\r\n    }\r\n    return (\r\n        <div className='error'>\r\n            {message}\r\n        </div>\r\n    )\r\n}\r\n\r\nexport default Notification;","import React, { useEffect, useState } from \"react\";\nimport lodash from \"lodash\";\nimport axios from \"axios\";\nimport Notification from \"./Notification\";\n\nconst App = () => {\n  const [personArray, setPersonArray] = useState([]);\n  const [newName, setNewName] = useState(\"\");\n  const [newNumber, setNewNumber] = useState(\"\");\n  const [filterInfo, setFilterInfo] = useState(\"\");\n  const [filterArray, setFilterArray] = useState([]);\n  const [isMessage, setMessage] = useState(null);\n  //const urlServer = \"http://localhost:3001/persons\";\n  const urlServer = \"http://localhost:3100/api/persons\";\n\n  useEffect(() => {\n    console.log(\"useEffect\");\n    axios.get(urlServer).then((response) => {\n      console.log(\"Promise fulfilled\");\n      setPersonArray(response.data);\n    });\n  }, []);\n\n  //console.log(\"Result useEffect: \", personArray);\n\n  const inputNameHandle = (event) => {\n    const inputName = event.target.value;\n    console.log(inputName);\n    setNewName(inputName);\n  };\n  const inputNumberHandle = (event) => {\n    const inputNumber = event.target.value;\n    console.log(inputNumber);\n    setNewNumber(inputNumber);\n  };\n  const inputFilterHandle = (event) => {\n    const inputFilter = event.target.value;\n    console.log(inputFilter);\n    setFilterInfo(inputFilter);\n    const filterResult = personArray.filter((person) =>\n      person.name.toLowerCase().match(inputFilter.toLowerCase())\n    );\n    console.log(\"filterResult\", filterResult);\n    setFilterArray(filterResult);\n  };\n\n  const formHandle = (event) => {\n    event.preventDefault();\n    const newArrayOfName = personArray.map((element) => element.name);\n    const newArrayOfNumber = personArray.map((element) => element.number);\n    // if (newArrayOfName.includes(newName)) {\n    //   return window.alert(`${newName} is already added to phonebook`);\n    // }\n    if (newArrayOfName.includes(newName)) {\n      if(newArrayOfNumber.includes(newNumber)){\n        return window.alert(`${newName} is already added to phonebook`);\n      }else if(!newArrayOfNumber.includes(newNumber)){\n        if (window.confirm(`${newName} is already added to phonebook, replace the old number with a new one which you input?`)){ //is true\n          const tempInfo = personArray.find(person => person.name === newName);\n          const personlUrl = urlServer + \"/\" + tempInfo.id;\n          const personObejct = {\n            name: newName,\n            number: newNumber,\n          };\n          axios.put(personlUrl, personObejct).then(response =>{\n            console.log(\"response.data:\", response.data);\n            setMessage(`${newName} und ${newNumber} are successfully saved`);\n            setTimeout(() => {\n              console.log(\"setTimeout\");\n              setMessage(null)\n            }, 3000);\n            return setPersonArray(personArray.map(info => info.id !== tempInfo.id ? info : response.data));\n          }).catch(error=>{\n            alert(`We couldn't a new data in the server`);\n          })\n        }\n      }else{\n        return null;\n      }\n    } else if (!newArrayOfName.includes(newName)) {\n      const personObejct = {\n        name: newName,\n        number: newNumber,\n      };\n      // return setPersonArray(personArray.concat(personObejct));\n      axios.post(urlServer, personObejct).then((response) => {\n        console.log(\"personObejct\", personObejct);\n        setMessage(`${newName} und ${newNumber} are successfully saved`);\n        setTimeout(() => {\n          console.log(\"setTimeout\");\n          setMessage(null);\n        }, 3000);\n        setPersonArray(personArray.concat(personObejct));\n        setNewName(\"\");\n        setNewNumber(\"\");\n      });\n    }\n  };\n\n  console.log(\"personArray\", personArray);\n\n  const toggleDeleteOf = (id) => {\n    const personlUrl = urlServer + \"/\" + id;\n    //console.log(`Got a click of ${id}`);\n    const resultDelete = personArray.filter((info) => info.id !== id);\n    if (window.confirm(\"do you really want to delete?\")) {\n      //console.log(\"okay\");\n      axios.delete(personlUrl).then((response) => {\n        //console.log(\"response.data\", response.data);\n        setPersonArray(resultDelete);\n      }).catch(error=>{\n        setMessage(`${newName} und ${newNumber} were already removed from server`);\n        setTimeout(() => {\n          console.log(\"setTimeout\");\n          setMessage(null);\n        }, 3000);\n      })\n    } else {\n      return null;\n    }\n    //console.log(\"personArray: \", personArray);\n  };\n\n  return (\n    <div>\n      <h2>Phonebook</h2>\n      <Notification message = {isMessage} />\n      <div>\n        {\" \"}\n        Filter shown with:{\" \"}\n        <input onChange={inputFilterHandle} value={filterInfo} />\n      </div>\n      <h2>Add a New</h2>\n      <form onSubmit={formHandle}>\n        <div>\n          {\" \"}\n          name: <input onChange={inputNameHandle} value={newName} />\n        </div>\n        <div>\n          {\" \"}\n          number: <input onChange={inputNumberHandle} value={newNumber} />\n        </div>\n        <div>\n          <button type=\"submit\">add</button>\n        </div>\n      </form>\n      <h2>Numbers</h2>\n      {personArray.map((personInfo) => (\n        <p key={personInfo.name}>\n          {personInfo.name} {personInfo.number}{\" \"}\n          <button onClick={() => toggleDeleteOf(personInfo.id)}>delete</button>\n        </p>\n      ))}\n      <h2>Filter Result</h2>\n      <div>\n        {filterArray.map((filterInfo) => (\n          <p key={filterInfo.name}>\n            {filterInfo.name} {filterInfo.number}\n          </p>\n        ))}\n      </div>\n    </div>\n  );\n};\n\nexport default App;\n","const reportWebVitals = onPerfEntry => {\n  if (onPerfEntry && onPerfEntry instanceof Function) {\n    import('web-vitals').then(({ getCLS, getFID, getFCP, getLCP, getTTFB }) => {\n      getCLS(onPerfEntry);\n      getFID(onPerfEntry);\n      getFCP(onPerfEntry);\n      getLCP(onPerfEntry);\n      getTTFB(onPerfEntry);\n    });\n  }\n};\n\nexport default reportWebVitals;\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport reportWebVitals from './reportWebVitals';\n\nReactDOM.render(\n  <React.StrictMode>\n    <App />\n  </React.StrictMode>,\n  document.getElementById('root')\n);\n\n// If you want to start measuring performance in your app, pass a function\n// to log results (for example: reportWebVitals(console.log))\n// or send to an analytics endpoint. Learn more: https://bit.ly/CRA-vitals\nreportWebVitals();\n"],"sourceRoot":""}